{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answers","content","Question","props","className","QuestionCount","counter","total","AnswerOption","type","name","id","answerContent","value","onChange","onAnswerSelected","htmlFor","Quiz","Fragment","title","questionId","questionTotal","answerOptions","map","key","console","log","answerType","answer","label","primary","onClick","e","preventDefault","nextStep","disabled","choose","Result","App","state","answersCount","result","final","handleAnswerSelected","event","currentTarget","setUserAnswer","setState","setNextQuestion","bind","length","setTimeout","setResults","getResults","param","array","splice","Options","this","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","Math","max","apply","filter","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e2e6894.chunk.js","sourcesContent":["var quizQuestions = [\n  {\n      question: \"What franchise would you rather play a game from?\",\n      answers: [\n          {\n              content: \"Halo\"\n          },\n          {\n              content: \"Pokemon\"\n          },\n          {\n              content: \"Uncharted\"\n          }\n      ]\n  },\n  {\n      question: \"Which console would you prefer to play with friends?\",\n      answers: [\n          {\n              content: \"X-Box\"\n          },\n          {\n              content: \"Nintendo 64\"\n          },\n          {\n              content: \"Playstation 1\"\n          }\n      ]\n  },\n  {\n      question: \"Which of these racing franchises would you prefer to play a game from?\",\n      answers: [\n          {\n              content: \"Forza\"\n          },\n          {\n              content: \"Mario Kart\"\n          },\n          {\n              content: \"Gran Turismo\"\n          }\n      ]\n  },\n  {\n      question: \"Which of these games do you think is best?\",\n      answers: [\n          {\n              content: \"BioShock\"\n          },\n          {\n              content: \"The Legend of Zelda: Ocarina of Time\"\n          },\n          {\n              content: \"Final Fantasy VII\"\n          }\n      ]\n  },\n  {\n      question: \"What console would you prefer to own?\",\n      answers: [\n          {\n              content: \"X-Box One\"\n          },\n          {\n              content: \"Wii U\"\n          },\n          {\n              content: \"Playstation 4\"\n          }\n      ]\n  }\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// 问题的内容\nfunction Question(props) {\n    return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n    content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// 每个问题的标题：一共几个问题，现在是第几个问题\nfunction QuestionCount(props) {\n    return (\n        <div className=\"questionCount\">\n            Question <span>{props.counter}</span> of <span>{props.total}</span>\n        </div>\n    );\n}\n\nQuestionCount.propTypes = {\n    counter: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// 按钮与选项\nfunction AnswerOption(props) {\n    // console.log(\"option\",props);\n    return (\n        <div>\n            <li className=\"answerOption\">\n                <input\n                    type=\"radio\"\n                    className=\"radioCustomButton\"\n                    name=\"radioGroup\"\n                    id={props.answerContent}\n                    value={props.answerContent}\n                    // disabled={props.answer}\n                    onChange={props.onAnswerSelected}\n                />\n                {/*label 一定要用htmlFor 与id绑定*/}\n                <label className=\"radioCustomLabel\" htmlFor={props.answerContent}>\n                    {props.answerContent}\n                </label>\n            </li>\n        </div>\n    );\n}\n\nAnswerOption.propTypes = {\n    // answerType: PropTypes.string.isRequired,\n    answerContent: PropTypes.string.isRequired,\n    answer: PropTypes.string.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React,{Component} from 'react'\nimport PropTypes from 'prop-types';\nimport quizQuestions from \"../api/quizQuestions\";\n// import { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\n\n//每一道题的容器： 标题+问题+选项\nfunction Quiz(props) {\n\n    function ToContinue(e){\n        e.preventDefault();\n        props.nextStep();\n    }\n    //生成每一个选项\n    function renderAnswerOptions(key) {\n        console.log(\"key\",key);\n        return (\n            <AnswerOption\n                key={key.content}\n                answerContent={key.content}\n                answerType={key.content}\n                answer={props.answer}\n                questionId={props.questionId}\n                onAnswerSelected={props.onAnswerSelected}\n            />\n        );\n    }\n\n    return (\n        //  没用的样式变换\n        // <CSSTransitionGroup\n        //   className=\"container\"\n        //   component=\"div\"\n        //   transitionName=\"fade\"\n        //   transitionEnterTimeout={800}\n        //   transitionLeaveTimeout={500}\n        //   transitionAppear\n        //   transitionAppearTimeout={500}\n        // >\n\n        <MuiThemeProvider>\n            <React.Fragment>\n                <AppBar title=\"Sports: What say you?\"/>\n                <QuestionCount counter={props.questionId} total={props.questionTotal} />\n                <Question content={props.question} />\n                <ul className=\"answerOptions\">\n                    {props.answerOptions.map(renderAnswerOptions)}\n                </ul>\n                <div className=\"ContinueButton\">\n                <RaisedButton\n                    label=\"Continue\"\n                    id=\"nStep\"\n                    primary={true}\n                    onClick={ToContinue}\n                    disabled={!props.choose}\n                />\n                </div>\n            </React.Fragment>\n        </MuiThemeProvider>\n        // </CSSTransitionGroup>\n    );\n}\n\nQuiz.propTypes = {\n    answer: PropTypes.string.isRequired,\n    answerOptions: PropTypes.array.isRequired,\n    question: PropTypes.string.isRequired,\n    questionId: PropTypes.number.isRequired,\n    questionTotal: PropTypes.number.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n}\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\n// import { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result() {\n  return (\n    // <CSSTransitionGroup\n    //   className=\"container result\"\n    //   component=\"div\"\n    //   transitionName=\"fade\"\n    //   transitionEnterTimeout={800}\n    //   transitionLeaveTimeout={500}\n    //   transitionAppear\n    //   transitionAppearTimeout={500}\n    // >\n      <MuiThemeProvider>\n          <React.Fragment>\n              <AppBar/>\n              < div className= 'Submit'>\n              <h1>Thank You For You participation </h1>\n              <p> We heard your voice! </p>\n              </div>\n          </React.Fragment>\n      </MuiThemeProvider>\n    // </CSSTransitionGroup>\n  );\n}\n\n// Result.propTypes = {\n//   quizResult: PropTypes.string.isRequired\n// };\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\n// import logo from './svg/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        counter: 0,\n        questionId: 1,\n        question: '',\n        answerOptions: [],\n        answer: '',\n        answersCount: {},\n        result: '',\n        final :[],\n        choose: false\n    };\n\n    componentDidMount() {\n        //创造一个字典\n        const Options = quizQuestions.map(question =>\n            question.answers\n        );\n        this.setState({\n            //初始状态\n            question: quizQuestions[0].question,\n            // answerOptions: shuffledAnswerOptions[0]\n            answerOptions: Options[0]\n        });\n        console.log(\"choose\",this.state.answerOptions);\n    }\n\n    /*** What is this ***/\n    handleAnswerSelected=(event)=> {\n        console.log(\"event\",event.currentTarget);\n        this.setUserAnswer(event.currentTarget.value);\n        this.setState({\n            choose:true\n        })\n        // if (this.state.questionId < quizQuestions.length) {\n        //     setTimeout(() => this.setNextQuestion(), 300);\n        // } else {\n        //     // already get to the last question\n        //     setTimeout(() => this.setResults(this.getResults()), 300);\n        // }\n    }\n    nextStep=()=>{\n        this.setNextQuestion=this.setNextQuestion.bind(this)\n        if (this.state.questionId < quizQuestions.length) {\n\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            // already get to the last question\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    setUserAnswer =(param)=> {\n        const len=this.state.final.length;\n        if(len=== this.state.counter) {\n            this.setState({\n                    final: [...this.state.final, param]\n                }\n            );\n        }\n        else\n        {\n            const array=[...this.state.final];\n            array.splice(this.state.counter,1);\n            console.log(\"test\",array);\n            this.setState({\n                    final: [...array,param]\n                }\n            );\n        }\n    }\n\n    setNextQuestion=()=> {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n\n        this.setState({\n            //设置问题和选项\n            counter: counter,\n            questionId: questionId,\n            question: quizQuestions[counter].question,\n            answerOptions: quizQuestions[counter].answers,\n            answer: '',\n            choose:false\n        });\n    }\n\n    getResults() {\n        const answersCount = this.state.answersCount;\n        const answersCountKeys = Object.keys(answersCount);\n        const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\n        console.log(\"test answer: \",this.state.answer);\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    }\n\n    setResults(result) {\n        if (result.length === 1) {\n            this.setState({ result: result[0] });\n        } else {\n            this.setState({ result: 'Undetermined' });\n        }\n    }\n\n    renderQuiz() {\n        // if(this.state.result)\n        //   console.log(\"oo\");\n        // else{\n        //   console.log('ya');\n        // // }\n        // console.log(\"this State\",this.state);\n        return (\n            <Quiz\n                answer={this.state.answer}\n                answerOptions={this.state.answerOptions}\n                questionId={this.state.questionId}\n                question={this.state.question}\n                questionTotal={quizQuestions.length}\n                onAnswerSelected={this.handleAnswerSelected}\n                nextStep={this.nextStep}\n                choose={this.state.choose}\n            />\n        );\n    }\n\n    renderResult() {\n        return <Result/>;\n    }\n//Guess 如果state.result 不是null那么 返回 Result\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                {/*<div className=\"App-header\">*/}\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                {/*</div>*/}\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}