{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answers","content","Question","props","className","QuestionCount","counter","total","AnswerOption","type","name","id","answerContent","value","onChange","onAnswerSelected","htmlFor","Quiz","Fragment","title","questionId","questionTotal","answerOptions","map","key","console","log","answerType","label","primary","onClick","e","preventDefault","nextStep","disabled","choose","Result","App","state","final","handleAnswerSelected","event","currentTarget","setUserAnswer","setState","setNextQuestion","bind","length","setTimeout","param","array","splice","Options","this","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa3dd12a.chunk.js","sourcesContent":["var quizQuestions = [\n  {\n      question: \"Choose your age range\",\n      answers: [\n          {\n              content: \"12-15\"\n          },\n          {\n              content: \"15-20\"\n          },\n          {\n              content: \"20-25\"\n          },\n          {\n              content: \"Other\"\n          }\n      ]\n  },\n  {\n      question: \"What's your favourite sport?\",\n      answers: [\n          {\n              content: \"Football\"\n          },\n          {\n              content: \"Basketball\"\n          },\n          {\n              content: \"Swimming\"\n          }\n      ]\n  },\n  {\n      question: \"How many hours do you train every week?\",\n      answers: [\n          {\n              content: \"20\"\n          },\n          {\n              content: \"30\"\n          },\n          {\n              content: \"40\"\n          }\n      ]\n  },\n  {\n      question: \"Do you think you have more space to improve?\",\n      answers: [\n          {\n              content: \"Disagree\"\n          },\n          {\n              content: \"Agree\"\n          },\n          {\n              content: \"Total Agree\"\n          }\n      ]\n  },\n  {\n      question: \"Do you like the way your couch teaches you?\",\n      answers: [\n          {\n              content: \"Disagree\"\n          },\n          {\n              content: \"Agree,but can be better\"\n          },\n          {\n              content: \"Very satisfied\"\n          }\n      ]\n  }\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction Question(props) {\n    return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n    content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction QuestionCount(props) {\n    return (\n        <div className=\"questionCount\">\n            Question <span>{props.counter}</span> of <span>{props.total}</span>\n        </div>\n    );\n}\n\nQuestionCount.propTypes = {\n    counter: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n    return (\n        <div>\n            <li className=\"answerOption\">\n                <input\n                    type=\"radio\"\n                    className=\"radioCustomButton\"\n                    name=\"radioGroup\"\n                    id={props.answerContent}\n                    value={props.answerContent}\n                    onChange={props.onAnswerSelected}\n                />\n                <label className=\"radioCustomLabel\" htmlFor={props.answerContent}>\n                    {props.answerContent}\n                </label>\n            </li>\n        </div>\n    );\n}\n\nAnswerOption.propTypes = {\n    answerContent: PropTypes.string.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React,{Component} from 'react'\nimport PropTypes from 'prop-types';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\n\n\nfunction Quiz(props) {\n\n    function ToContinue(e){\n        e.preventDefault();\n        props.nextStep();\n    }\n    //生成每一个选项\n    function renderAnswerOptions(key) {\n        console.log(\"key\",key);\n        return (\n            <AnswerOption\n                key={key.content}\n                answerContent={key.content}\n                answerType={key.content}\n                questionId={props.questionId}\n                onAnswerSelected={props.onAnswerSelected}\n            />\n        );\n    }\n\n    return (\n        <MuiThemeProvider>\n            <React.Fragment>\n                <AppBar title=\"Sports: What say you?\"/>\n                <QuestionCount counter={props.questionId} total={props.questionTotal} />\n                <Question content={props.question} />\n                <ul className=\"answerOptions\">\n                    {props.answerOptions.map(renderAnswerOptions)}\n                </ul>\n                <div className=\"ContinueButton\">\n                <RaisedButton\n                    label=\"Continue\"\n                    id=\"nStep\"\n                    primary={true}\n                    onClick={ToContinue}\n                    disabled={!props.choose}\n                />\n                </div>\n            </React.Fragment>\n        </MuiThemeProvider>\n    );\n}\n\nQuiz.propTypes = {\n    answerOptions: PropTypes.array.isRequired,\n    question: PropTypes.string.isRequired,\n    questionId: PropTypes.number.isRequired,\n    questionTotal: PropTypes.number.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n}\nexport default Quiz;\n","import React from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\n\nfunction Result() {\n  return (\n      <MuiThemeProvider>\n          <React.Fragment>\n              <AppBar/>\n              < div className= 'Submit'>\n              <h1>Thank You For You Participation </h1>\n              <p> We heard your voice! </p>\n              </div>\n          </React.Fragment>\n      </MuiThemeProvider>\n  );\n}\n\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\n// import logo from './svg/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        counter: 0,\n        questionId: 1,\n        question: '',\n        answerOptions: [],\n        final :[],\n        choose: false\n    };\n\n    componentDidMount() {\n        const Options = quizQuestions.map(question =>\n            question.answers\n        );\n        this.setState({\n            //initial\n            question: quizQuestions[0].question,\n            answerOptions: Options[0]\n        });\n        console.log(\"choose\",this.state.answerOptions);\n    }\n\n    /*** What is this ***/\n    handleAnswerSelected=(event)=> {\n        console.log(\"event\",event.currentTarget);\n        this.setUserAnswer(event.currentTarget.value);\n        this.setState({\n            choose:true\n        })\n    }\n    nextStep=()=>{\n        this.setNextQuestion=this.setNextQuestion.bind(this)\n        if (this.state.questionId < quizQuestions.length) {\n\n            setTimeout(() => this.setNextQuestion(), 300);\n        }\n        else {\n            // already get to the last question\n            const questionId = this.state.questionId + 1;\n            this.setState({questionId:questionId})\n        }\n    }\n\n    setUserAnswer =(param)=> {\n        const len=this.state.final.length;\n        if(len=== this.state.counter) {\n            this.setState({\n                    final: [...this.state.final, param]\n                }\n            );\n        }\n        else\n        {\n            const array=[...this.state.final];\n            array.splice(this.state.counter,1);\n            console.log(\"test\",array);\n            this.setState({\n                    final: [...array,param]\n                }\n            );\n        }\n    }\n\n    setNextQuestion=()=> {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n\n        this.setState({\n            //设置问题和选项\n            counter: counter,\n            questionId: questionId,\n            question: quizQuestions[counter].question,\n            answerOptions: quizQuestions[counter].answers,\n            choose:false\n        });\n    }\n\n\n    renderQuiz() {\n        return (\n            <Quiz\n                // answer={this.state.answer}\n                answerOptions={this.state.answerOptions}\n                questionId={this.state.questionId}\n                question={this.state.question}\n                questionTotal={quizQuestions.length}\n                onAnswerSelected={this.handleAnswerSelected}\n                nextStep={this.nextStep}\n                choose={this.state.choose}\n            />\n        );\n    }\n\n    renderResult() {\n        return <Result/>;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                {this.state.questionId>quizQuestions.length ? this.renderResult() : this.renderQuiz()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}