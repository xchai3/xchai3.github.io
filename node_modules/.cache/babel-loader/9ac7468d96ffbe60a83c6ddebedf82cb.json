{"ast":null,"code":"var _jsxFileName = \"/Users/toneychai/Desktop/question/src/App.js\";\nimport React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result'; // import logo from './svg/logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: '',\n      final: []\n    };\n\n    this.handleAnswerSelected = event => {\n      console.log(\"event\", event.currentTarget);\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n      } else {\n        setTimeout(() => this.setResults(this.getResults()), 300);\n      }\n    };\n\n    this.setUserAnswer = param => {\n      this.setState((state, props) => ({\n        // answersCount: {\n        //     ...state.answersCount,\n        //     [answer]: (state.answersCount[answer] || 0) + 1\n        // },\n        // answer: answer\n        final: [...this.state.final, param]\n      }));\n    };\n  }\n\n  componentDidMount() {\n    //创造一个字典\n    const Options = quizQuestions.map(question => question.answers);\n    this.setState({\n      //初始状态\n      question: quizQuestions[0].question,\n      // answerOptions: shuffledAnswerOptions[0]\n      answerOptions: Options[0]\n    });\n    console.log(\"choose\", this.state.answerOptions);\n  }\n  /*** What is this ***/\n\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      //设置问题和选项\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n    console.log(\"test answer: \", this.state.answer);\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  renderQuiz() {\n    // if(this.state.result)\n    //   console.log(\"oo\");\n    // else{\n    //   console.log('ya');\n    // // }\n    // console.log(\"this State\",this.state);\n    return /*#__PURE__*/React.createElement(Quiz, {\n      answer: this.state.answer,\n      answerOptions: this.state.answerOptions,\n      questionId: this.state.questionId,\n      question: this.state.question,\n      questionTotal: quizQuestions.length,\n      onAnswerSelected: this.handleAnswerSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderResult() {\n    return /*#__PURE__*/React.createElement(Result, {\n      quizResult: this.state.result,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 16\n      }\n    });\n  } //Guess 如果state.result 不是null那么 返回 Result\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"React Quiz\"), this.renderQuiz());\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/toneychai/Desktop/question/src/App.js"],"names":["React","Component","quizQuestions","Quiz","Result","App","state","counter","questionId","question","answerOptions","answer","answersCount","result","final","handleAnswerSelected","event","console","log","currentTarget","setUserAnswer","value","length","setTimeout","setNextQuestion","setResults","getResults","param","setState","props","componentDidMount","Options","map","answers","answersCountKeys","Object","keys","answersCountValues","key","maxAnswerCount","Math","max","apply","filter","renderQuiz","renderResult","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\n// import logo from './svg/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        counter: 0,\n        questionId: 1,\n        question: '',\n        answerOptions: [],\n        answer: '',\n        answersCount: {},\n        result: '',\n        final :[]\n    };\n\n    componentDidMount() {\n        //创造一个字典\n        const Options = quizQuestions.map(question =>\n            question.answers\n        );\n        this.setState({\n            //初始状态\n            question: quizQuestions[0].question,\n            // answerOptions: shuffledAnswerOptions[0]\n            answerOptions: Options[0]\n        });\n        console.log(\"choose\",this.state.answerOptions);\n    }\n\n    /*** What is this ***/\n    handleAnswerSelected=(event)=> {\n        console.log(\"event\",event.currentTarget);\n        this.setUserAnswer(event.currentTarget.value);\n\n        if (this.state.questionId < quizQuestions.length) {\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    setUserAnswer =(param)=> {\n        this.setState((state, props) => ({\n\n            // answersCount: {\n            //     ...state.answersCount,\n            //     [answer]: (state.answersCount[answer] || 0) + 1\n            // },\n            // answer: answer\n            final:[...this.state.final,param]\n        }\n        ));\n    }\n\n    setNextQuestion() {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n\n        this.setState({\n            //设置问题和选项\n            counter: counter,\n            questionId: questionId,\n            question: quizQuestions[counter].question,\n            answerOptions: quizQuestions[counter].answers,\n            answer: ''\n        });\n    }\n\n    getResults() {\n        const answersCount = this.state.answersCount;\n        const answersCountKeys = Object.keys(answersCount);\n        const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\n        console.log(\"test answer: \",this.state.answer);\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    }\n\n    setResults(result) {\n        if (result.length === 1) {\n            this.setState({ result: result[0] });\n        } else {\n            this.setState({ result: 'Undetermined' });\n        }\n    }\n\n    renderQuiz() {\n        // if(this.state.result)\n        //   console.log(\"oo\");\n        // else{\n        //   console.log('ya');\n        // // }\n        // console.log(\"this State\",this.state);\n        return (\n            <Quiz\n                answer={this.state.answer}\n                answerOptions={this.state.answerOptions}\n                questionId={this.state.questionId}\n                question={this.state.question}\n                questionTotal={quizQuestions.length}\n                onAnswerSelected={this.handleAnswerSelected}\n            />\n        );\n    }\n\n    renderResult() {\n        return <Result quizResult={this.state.result} />;\n    }\n//Guess 如果state.result 不是null那么 返回 Result\n    render() {\n        return (\n            <div className=\"App\">\n                {/*<div className=\"App-header\">*/}\n                    {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                    <h2>React Quiz</h2>\n                {/*</div>*/}\n                {this.renderQuiz()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}